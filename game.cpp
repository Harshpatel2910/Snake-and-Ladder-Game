#include <iostream>
#include <time.h>

using namespace std;

// game .h
class Game
{
private:
    string name1;
    string name2;

public:
    Game();
    ~Game();
    void get_instruction();
    /**********************************
    1st param index
    2nd moves
    returns the final index of player p
    **********************************/
    int makeAMove(int i, int m);
    void setNames();
    string getName(int); // it takes the player index
    void get_player_turn(int);
};
/***************************************************************************/

//dice.h
class Dice
{
private:
    int n;

public:
    Dice();
    ~Dice();
    int randomRoll();
};
/***********************************************************************************/

// boarddatatable.h

class Cell
{
public:
    int index;
    int snakeHead;
    int snakeTail;
    int ladderStart;
    int ladderEnd;
    Cell()
    {
        snakeHead = snakeTail = ladderEnd = ladderStart = -1;
    }
};

class BoardDataTable : private Cell
{
private:
    Cell *table;
    /******************************************************
        Member Functions to assign the head-tails informations
        ******************************************************/
    void addSnakeHead(int);      // here int param represents index value.
    void addSnakeTail(int, int); // here first param shows index and second given the index of tail of corresponding snake.
    void addLadderStart(int);    // here int param represents index value.
    void addLadderEnd(int, int); // here first param shows index and second given the index of end of corresponding ladder.

public:
    BoardDataTable();
    virtual ~BoardDataTable();
    void CreateTable(int level);
    void DisplayTableInformation();
    int getSnakeTail(int i);
    int getLadderEnd(int i);
};
/**********************************************************************/

// board .h
class Board
{
private:
    char X[101], Y[101];

public:
    Board();
    virtual ~Board();
    void DisplayBoard();
    /****************************
        first param gives the player number. i.e., 1 for X and 2 for Y
        and second param gives the index at which updation is to be done
        ****************************/
    void updateBoard(int, int);
    void showDie(int); // will take number on die as parameter

    /******************************************
        Testing code for LEVEL implementation
        ******************************************/
    void DisplayBoard(int level);
};

/*************************************************************************/

// game cpp
Game::Game()
{
    //ctor
}

Game::~Game()
{
    //dtor
}

void Game::setNames()
{
    string s1, s2;
    cout << "Enter the name of the First Player : ";
    getline(cin, s1);
    cout << "\n";
    cout << "Enter the name of the Second Player : ";
    getline(cin, s2);

    cout << "\n";

    name1 = s1;
    name2 = s2;
}

void Game::get_player_turn(int k)
{
    cout << "Turn of : " << getName(k) << "\n";
    return;
}

string Game::getName(int ind)
{
    if (ind == 1)
    {
        return name1;
    }
    else
    {
        return name2;
    }
}

void Game::get_instruction()
{
    cout << "SET OF RULES and GENERAL INSTRUCTIONS:\n\n";
    cout << "\tRULES:\n\n";
    cout << "\t\t->Whenever any of player visits the Cell, consisting of snake mouth, then that player will be degraded to Cell containing tail of that snake.\n";
    cout << "\t\t->In the similar manner, whenever any player visits the cell, containing ladder start, then that player will be promoted to cell containing ladder end of that particular Ladder.\n";
    cout << "\tINSTRUCTIONS:\n\n";
    cout << "\t\t->This is Snake And Ladder Game for two player.\n\t\t->Here there are total of 100 cells, and in each cell is NUMBER denoting the position of Cell.\n\t\t->Here snake mouth is  defined  as SIS, also SIE stand for snake tail where I stands for the Snake number.\n\t\t->For ladders, Ladder start is defined as LIS Ladder start position and LIE as Ladder end position, here also I stands for Ladder number.\n\n";
    return;
}

int Game::makeAMove(int i, int m)
{
    return i + m;
}
/*************************************************/

// dice m cpp

Dice::Dice()
{
}

Dice::~Dice()
{
}

int Dice::randomRoll()
{
    int rnd;
    for (int i = 0; i < 10; i++)
    {
        srand(time(0));
        rnd = 1 + rand() % 6;
    }
    return rnd;
}
/********************************************/

// board data table cpp
BoardDataTable::BoardDataTable()
{
    table = new Cell[101];
}

BoardDataTable::~BoardDataTable()
{
    delete table;
}

void BoardDataTable::addSnakeHead(int i)
{
    table[i].snakeHead = i;
    return;
}

void BoardDataTable::addSnakeTail(int i, int p)
{
    table[i].snakeTail = p;
    return;
}

void BoardDataTable::addLadderStart(int i)
{
    table[i].ladderStart = i;
    return;
}

void BoardDataTable::addLadderEnd(int i, int p)
{
    table[i].ladderEnd = p;
    return;
}

/*************************************
        IMPROVE THIS FURTHER
*************************************/

void BoardDataTable::CreateTable(int level)
{
    if (level == 1)
    {
        // Adding all heads of sankes;
        addSnakeHead(25);
        addSnakeHead(46);
        addSnakeHead(74);
        addSnakeHead(88);

        // Adding all tails of snakes:
        addSnakeTail(25, 65);
        addSnakeTail(46, 12);
        addSnakeTail(74, 52);
        addSnakeTail(88, 76);

        // Adding all starts of ladders:
        addLadderStart(19);
        addLadderStart(32);
        addLadderStart(61);
        addLadderStart(73);

        // Adding all ends of ladders:
        addLadderEnd(19, 66);
        addLadderEnd(32, 53);
        addLadderEnd(61, 100);
        addLadderEnd(73, 91);
    }
    else if (level == 2)
    {
        // Adding all heads of sankes;
        addSnakeHead(17);
        addSnakeHead(54);
        addSnakeHead(62);
        addSnakeHead(64);
        addSnakeHead(87);
        addSnakeHead(93);
        addSnakeHead(95);
        addSnakeHead(98);

        // Adding all tails of snakes:
        addSnakeTail(17, 7);
        addSnakeTail(54, 34);
        addSnakeTail(62, 19);
        addSnakeTail(64, 60);
        addSnakeTail(87, 36);
        addSnakeTail(93, 73);
        addSnakeTail(95, 75);
        addSnakeTail(98, 79);

        // Adding all starts of ladders:
        addLadderStart(4);
        addLadderStart(9);
        addLadderStart(21);
        addLadderStart(28);
        addLadderStart(51);
        addLadderStart(72);
        addLadderStart(80);

        // Adding all ends of ladders:
        addLadderEnd(4, 14);
        addLadderEnd(9, 31);
        addLadderEnd(21, 42);
        addLadderEnd(28, 84);
        addLadderEnd(51, 67);
        addLadderEnd(72, 91);
        addLadderEnd(80, 99);
    }
    else if (level == 3)
    {
        // Adding all heads of sankes;
        addSnakeHead(48);
        addSnakeHead(52);
        addSnakeHead(57);
        addSnakeHead(64);
        addSnakeHead(68);
        addSnakeHead(84);
        addSnakeHead(88);
        addSnakeHead(93);
        addSnakeHead(98);

        // Adding all tails of snakes:
        addSnakeTail(48, 9);
        addSnakeTail(52, 11);
        addSnakeTail(57, 17);
        addSnakeTail(64, 24);
        addSnakeTail(68, 35);
        addSnakeTail(84, 21);
        addSnakeTail(88, 51);
        addSnakeTail(93, 37);
        addSnakeTail(98, 13);

        // Adding all starts of ladders:
        addLadderStart(8);
        addLadderStart(19);
        addLadderStart(21);
        addLadderStart(28);
        addLadderStart(50);
        addLadderStart(61);
        addLadderStart(66);
        addLadderStart(77);

        // Adding all ends of ladders:
        addLadderEnd(8, 26);
        addLadderEnd(19, 38);
        addLadderEnd(21, 79);
        addLadderEnd(28, 49);
        addLadderEnd(50, 91);
        addLadderEnd(61, 99);
        addLadderEnd(66, 87);
        addLadderEnd(77, 96);
    }
    return;
}

void BoardDataTable::DisplayTableInformation()
{
    for (int i = 1; i < 101; i++)
    {
        if (table[i].snakeHead == -1 && table[i].ladderStart == -1)
            continue;
        else if (table[i].snakeHead != -1)
        {
            cout << "Snake mouth at index: " << table[i].index << " which will lead the player to index: " << table[i].snakeTail << ".\n";
        }
        else if (table[i].ladderStart != -1)
        {
            cout << "Ladder start at index: " << table[i].index << " which will lead the player to index: " << table[i].ladderEnd << ".\n";
        }
    }
    return;
}

int BoardDataTable::getSnakeTail(int idx)
{
    int f = -1;
    if (table[idx].snakeHead != -1)
    {
        f = table[idx].snakeTail;
    }
    return f;
}

int BoardDataTable::getLadderEnd(int idx)
{
    int f = -1;
    if (table[idx].ladderStart != -1)
        f = table[idx].ladderEnd;
    return f;
}

/**************************************/

// board cpp

Board::Board()
{
    // initializing each cell as blank
    for (int i = 0; i < 101; i++)
    {
        X[i] = Y[i] = 32;
    }
    // and taking players at first cell
    X[1] = 'X';
    Y[1] = 'Y';
}

Board::~Board()
{
}

void Board::DisplayBoard()
{
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[91] << " L4E #  # " << X[92] << "     #  # " << X[93] << "     #  # " << X[94] << "     #  # " << X[95] << "     #  # " << X[96] << "     #  # " << X[97] << "     #  # " << X[98] << "     #  # " << X[99] << "     #  # " << X[100] << " L3E #\n\t\t# 91    #  # 92    #  # 93    #  # 94    #  # 95    #  # 96    #  # 97    #  # 98    #  # 99    #  # 100   #\n\t\t# " << Y[91] << "     #  # " << Y[92] << "     #  # " << Y[93] << "     #  # " << Y[94] << "     #  # " << Y[95] << "     #  # " << Y[96] << "     #  # " << Y[97] << "     #  # " << Y[98] << "     #  # " << Y[99] << "     #  # " << Y[100] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[81] << "     #  # " << X[82] << "     #  # " << X[83] << "     #  # " << X[84] << "     #  # " << X[85] << "     #  # " << X[86] << "     #  # " << X[87] << "     #  # " << X[88] << "     #  # " << X[89] << "     #  # " << X[90] << "     #\n\t\t# 81    #  # 82    #  # 83    #  # 84    #  # 85    #  # 86    #  # 87    #  # 88    #  # 89    #  # 90    #\n\t\t# " << Y[81] << "     #  # " << Y[82] << "     #  # " << Y[83] << "     #  # " << Y[84] << "     #  # " << Y[85] << "     #  # " << Y[86] << "     #  # " << Y[87] << "     #  # " << Y[88] << " S4S #  # " << Y[89] << "     #  # " << Y[90] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[71] << "     #  # " << X[72] << "     #  # " << X[73] << " L4S #  # " << X[74] << "     #  # " << X[75] << "     #  # " << X[76] << "     #  # " << X[77] << "     #  # " << X[78] << "     #  # " << X[79] << "     #  # " << X[80] << "     #\n\t\t# 71    #  # 72    #  # 73    #  # 74    #  # 75    #  # 76    #  # 77    #  # 78    #  # 79    #  # 80    #\n\t\t# " << Y[71] << "     #  # " << Y[72] << "     #  # " << Y[73] << "     #  # " << Y[74] << " S3S #  # " << Y[75] << "     #  # " << Y[76] << " S4E #  # " << Y[77] << "     #  # " << Y[78] << "     #  # " << Y[79] << "     #  # " << Y[80] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[61] << "     #  # " << X[62] << "     #  # " << X[63] << "     #  # " << X[64] << "     #  # " << X[65] << "     #  # " << X[66] << " L1E #  # " << X[67] << " L3S #  # " << X[68] << "     #  # " << X[69] << "     #  # " << X[70] << "     #\n\t\t# 61    #  # 62    #  # 63    #  # 64    #  # 65    #  # 66    #  # 67    #  # 68    #  # 69    #  # 70    #\n\t\t# " << Y[61] << "     #  # " << Y[62] << "     #  # " << Y[63] << "     #  # " << Y[64] << "     #  # " << Y[65] << "     #  # " << Y[66] << "     #  # " << Y[67] << "     #  # " << Y[68] << "     #  # " << Y[69] << "     #  # " << Y[70] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[51] << "     #  # " << X[52] << "     #  # " << X[53] << " L2E #  # " << X[54] << "     #  # " << X[55] << "     #  # " << X[56] << "     #  # " << X[57] << "     #  # " << X[58] << "     #  # " << X[59] << "     #  # " << X[60] << "     #\n\t\t# 51    #  # 52    #  # 53    #  # 54    #  # 55    #  # 56    #  # 57    #  # 58    #  # 59    #  # 60    #\n\t\t# " << Y[51] << "     #  # " << Y[52] << " S3E #  # " << Y[53] << "     #  # " << Y[54] << "     #  # " << Y[55] << "     #  # " << Y[56] << "     #  # " << Y[57] << "     #  # " << Y[58] << "     #  # " << Y[59] << "     #  # " << Y[60] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[41] << "     #  # " << X[42] << "     #  # " << X[43] << "     #  # " << X[44] << "     #  # " << X[45] << "     #  # " << X[46] << "     #  # " << X[47] << "     #  # " << X[48] << "     #  # " << X[49] << "     #  # " << X[50] << "     #\n\t\t# 41    #  # 42    #  # 43    #  # 44    #  # 45    #  # 46    #  # 47    #  # 48    #  # 49    #  # 50    #\n\t\t# " << Y[41] << "     #  # " << Y[42] << "     #  # " << Y[43] << "     #  # " << Y[44] << "     #  # " << Y[45] << "     #  # " << Y[46] << " S2S #  # " << Y[47] << "     #  # " << Y[48] << "     #  # " << Y[49] << "     #  # " << Y[50] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[31] << "     #  # " << X[32] << " L2S #  # " << X[33] << "     #  # " << X[34] << "     #  # " << X[35] << "     #  # " << X[36] << "     #  # " << X[37] << "     #  # " << X[38] << "     #  # " << X[39] << "     #  # " << X[40] << "     #\n\t\t# 31    #  # 32    #  # 33    #  # 34    #  # 35    #  # 36    #  # 37    #  # 38    #  # 39    #  # 40    #\n\t\t# " << Y[31] << "     #  # " << Y[32] << "     #  # " << Y[33] << "     #  # " << Y[34] << "     #  # " << Y[35] << "     #  # " << Y[36] << "     #  # " << Y[37] << "     #  # " << Y[38] << "     #  # " << Y[39] << "     #  # " << Y[40] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[21] << "     #  # " << X[22] << "     #  # " << X[23] << "     #  # " << X[24] << "     #  # " << X[25] << "     #  # " << X[26] << "     #  # " << X[27] << "     #  # " << X[28] << "     #  # " << X[29] << "     #  # " << X[30] << "     #\n\t\t# 21    #  # 22    #  # 23    #  # 24    #  # 25    #  # 26    #  # 27    #  # 28    #  # 29    #  # 30    #\n\t\t# " << Y[21] << "     #  # " << Y[22] << "     #  # " << Y[23] << "     #  # " << Y[24] << "     #  # " << Y[25] << " S1S #  # " << Y[26] << "     #  # " << Y[27] << "     #  # " << Y[28] << "     #  # " << Y[29] << "     #  # " << Y[30] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[11] << "     #  # " << X[12] << "     #  # " << X[13] << "     #  # " << X[14] << "     #  # " << X[15] << "     #  # " << X[16] << "     #  # " << X[17] << "     #  # " << X[18] << "     #  # " << X[19] << " L1S #  # " << X[20] << "     #\n\t\t# 11    #  # 12    #  # 13    #  # 14    #  # 15    #  # 16    #  # 17    #  # 18    #  # 19    #  # 20    #\n\t\t# " << Y[11] << "     #  # " << Y[12] << " S2E #  # " << Y[13] << "     #  # " << Y[14] << "     #  # " << Y[15] << "     #  # " << Y[16] << "     #  # " << Y[17] << "     #  # " << Y[18] << "     #  # " << Y[19] << "     #  # " << Y[20] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
    cout << "\n";
    cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[1] << "     #  # " << X[2] << "     #  # " << X[3] << "     #  # " << X[4] << "     #  # " << X[5] << "     #  # " << X[6] << "     #  # " << X[7] << "     #  # " << X[8] << "     #  # " << X[9] << "     #  # " << X[10] << "     #\n\t\t# 1     #  # 2     #  # 3     #  # 4     #  # 5     #  # 6     #  # 7     #  # 8     #  # 9     #  # 10    #\n\t\t# " << Y[1] << "     #  # " << Y[2] << "     #  # " << Y[3] << "     #  # " << Y[4] << "     #  # " << Y[5] << "     #  # " << Y[6] << " S1E #  # " << Y[7] << "     #  # " << Y[8] << "     #  # " << Y[9] << "     #  # " << Y[10] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
}

void Board::DisplayBoard(int level)
{
    if (level == 1)
    {
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[91] << " L4E #  # " << X[92] << "     #  # " << X[93] << "     #  # " << X[94] << "     #  # " << X[95] << "     #  # " << X[96] << "     #  # " << X[97] << "     #  # " << X[98] << "     #  # " << X[99] << "     #  # " << X[100] << " L3E #\n\t\t# 91    #  # 92    #  # 93    #  # 94    #  # 95    #  # 96    #  # 97    #  # 98    #  # 99    #  # 100   #\n\t\t# " << Y[91] << "     #  # " << Y[92] << "     #  # " << Y[93] << "     #  # " << Y[94] << "     #  # " << Y[95] << "     #  # " << Y[96] << "     #  # " << Y[97] << "     #  # " << Y[98] << "     #  # " << Y[99] << "     #  # " << Y[100] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[81] << "     #  # " << X[82] << "     #  # " << X[83] << "     #  # " << X[84] << "     #  # " << X[85] << "     #  # " << X[86] << "     #  # " << X[87] << "     #  # " << X[88] << "     #  # " << X[89] << "     #  # " << X[90] << "     #\n\t\t# 81    #  # 82    #  # 83    #  # 84    #  # 85    #  # 86    #  # 87    #  # 88    #  # 89    #  # 90    #\n\t\t# " << Y[81] << "     #  # " << Y[82] << "     #  # " << Y[83] << "     #  # " << Y[84] << "     #  # " << Y[85] << "     #  # " << Y[86] << "     #  # " << Y[87] << "     #  # " << Y[88] << " S4S #  # " << Y[89] << "     #  # " << Y[90] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[71] << "     #  # " << X[72] << "     #  # " << X[73] << " L4S #  # " << X[74] << "     #  # " << X[75] << "     #  # " << X[76] << "     #  # " << X[77] << "     #  # " << X[78] << "     #  # " << X[79] << "     #  # " << X[80] << "     #\n\t\t# 71    #  # 72    #  # 73    #  # 74    #  # 75    #  # 76    #  # 77    #  # 78    #  # 79    #  # 80    #\n\t\t# " << Y[71] << "     #  # " << Y[72] << "     #  # " << Y[73] << "     #  # " << Y[74] << " S3S #  # " << Y[75] << "     #  # " << Y[76] << " S4E #  # " << Y[77] << "     #  # " << Y[78] << "     #  # " << Y[79] << "     #  # " << Y[80] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[61] << "     #  # " << X[62] << "     #  # " << X[63] << "     #  # " << X[64] << "     #  # " << X[65] << "     #  # " << X[66] << " L1E #  # " << X[67] << " L3S #  # " << X[68] << "     #  # " << X[69] << "     #  # " << X[70] << "     #\n\t\t# 61    #  # 62    #  # 63    #  # 64    #  # 65    #  # 66    #  # 67    #  # 68    #  # 69    #  # 70    #\n\t\t# " << Y[61] << "     #  # " << Y[62] << "     #  # " << Y[63] << "     #  # " << Y[64] << "     #  # " << Y[65] << "     #  # " << Y[66] << "     #  # " << Y[67] << "     #  # " << Y[68] << "     #  # " << Y[69] << "     #  # " << Y[70] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[51] << "     #  # " << X[52] << "     #  # " << X[53] << " L2E #  # " << X[54] << "     #  # " << X[55] << "     #  # " << X[56] << "     #  # " << X[57] << "     #  # " << X[58] << "     #  # " << X[59] << "     #  # " << X[60] << "     #\n\t\t# 51    #  # 52    #  # 53    #  # 54    #  # 55    #  # 56    #  # 57    #  # 58    #  # 59    #  # 60    #\n\t\t# " << Y[51] << "     #  # " << Y[52] << " S3E #  # " << Y[53] << "     #  # " << Y[54] << "     #  # " << Y[55] << "     #  # " << Y[56] << "     #  # " << Y[57] << "     #  # " << Y[58] << "     #  # " << Y[59] << "     #  # " << Y[60] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[41] << "     #  # " << X[42] << "     #  # " << X[43] << "     #  # " << X[44] << "     #  # " << X[45] << "     #  # " << X[46] << "     #  # " << X[47] << "     #  # " << X[48] << "     #  # " << X[49] << "     #  # " << X[50] << "     #\n\t\t# 41    #  # 42    #  # 43    #  # 44    #  # 45    #  # 46    #  # 47    #  # 48    #  # 49    #  # 50    #\n\t\t# " << Y[41] << "     #  # " << Y[42] << "     #  # " << Y[43] << "     #  # " << Y[44] << "     #  # " << Y[45] << "     #  # " << Y[46] << " S2S #  # " << Y[47] << "     #  # " << Y[48] << "     #  # " << Y[49] << "     #  # " << Y[50] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[31] << "     #  # " << X[32] << " L2S #  # " << X[33] << "     #  # " << X[34] << "     #  # " << X[35] << "     #  # " << X[36] << "     #  # " << X[37] << "     #  # " << X[38] << "     #  # " << X[39] << "     #  # " << X[40] << "     #\n\t\t# 31    #  # 32    #  # 33    #  # 34    #  # 35    #  # 36    #  # 37    #  # 38    #  # 39    #  # 40    #\n\t\t# " << Y[31] << "     #  # " << Y[32] << "     #  # " << Y[33] << "     #  # " << Y[34] << "     #  # " << Y[35] << "     #  # " << Y[36] << "     #  # " << Y[37] << "     #  # " << Y[38] << "     #  # " << Y[39] << "     #  # " << Y[40] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[21] << "     #  # " << X[22] << "     #  # " << X[23] << "     #  # " << X[24] << "     #  # " << X[25] << "     #  # " << X[26] << "     #  # " << X[27] << "     #  # " << X[28] << "     #  # " << X[29] << "     #  # " << X[30] << "     #\n\t\t# 21    #  # 22    #  # 23    #  # 24    #  # 25    #  # 26    #  # 27    #  # 28    #  # 29    #  # 30    #\n\t\t# " << Y[21] << "     #  # " << Y[22] << "     #  # " << Y[23] << "     #  # " << Y[24] << "     #  # " << Y[25] << " S1S #  # " << Y[26] << "     #  # " << Y[27] << "     #  # " << Y[28] << "     #  # " << Y[29] << "     #  # " << Y[30] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[11] << "     #  # " << X[12] << "     #  # " << X[13] << "     #  # " << X[14] << "     #  # " << X[15] << "     #  # " << X[16] << "     #  # " << X[17] << "     #  # " << X[18] << "     #  # " << X[19] << " L1S #  # " << X[20] << "     #\n\t\t# 11    #  # 12    #  # 13    #  # 14    #  # 15    #  # 16    #  # 17    #  # 18    #  # 19    #  # 20    #\n\t\t# " << Y[11] << "     #  # " << Y[12] << " S2E #  # " << Y[13] << "     #  # " << Y[14] << "     #  # " << Y[15] << "     #  # " << Y[16] << "     #  # " << Y[17] << "     #  # " << Y[18] << "     #  # " << Y[19] << "     #  # " << Y[20] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\t\t# " << X[1] << "     #  # " << X[2] << "     #  # " << X[3] << "     #  # " << X[4] << "     #  # " << X[5] << "     #  # " << X[6] << "     #  # " << X[7] << "     #  # " << X[8] << "     #  # " << X[9] << "     #  # " << X[10] << "     #\n\t\t# 1     #  # 2     #  # 3     #  # 4     #  # 5     #  # 6     #  # 7     #  # 8     #  # 9     #  # 10    #\n\t\t# " << Y[1] << "     #  # " << Y[2] << "     #  # " << Y[3] << "     #  # " << Y[4] << "     #  # " << Y[5] << "     #  # " << Y[6] << " S1E #  # " << Y[7] << "     #  # " << Y[8] << "     #  # " << Y[9] << "     #  # " << Y[10] << "     #\n\t\t# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\n\n";
    }

    else if (level == 2)
    {
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[91] << " L7E #  # " << X[92] << "     #  # " << X[93] << "     #  # " << X[94] << "     #  # " << X[95] << "     #  # " << X[96] << "     #  # " << X[97] << "     #  # " << X[98] << "     #  # " << X[99] << " L8E #  # " << X[100] << " L3E #\n# 91    #  # 92    #  # 93    #  # 94    #  # 95    #  # 96    #  # 97    #  # 98    #  # 99    #  # 100   #\n# " << Y[91] << "     #  # " << Y[92] << "     #  # " << Y[93] << " S6S #  # " << Y[94] << "     #  # " << Y[95] << " S7S #  # " << Y[96] << "     #  # " << Y[97] << "     #  # " << Y[98] << " S8S #  # " << Y[99] << "     #  # " << Y[100] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[81] << "     #  # " << X[82] << "     #  # " << X[83] << "     #  # " << X[84] << " L5E #  # " << X[85] << "     #  # " << X[86] << "     #  # " << X[87] << "     #  # " << X[88] << "     #  # " << X[89] << "     #  # " << X[90] << "     #\n# 81    #  # 82    #  # 83    #  # 84    #  # 85    #  # 86    #  # 87    #  # 88    #  # 89    #  # 90    #\n# " << Y[81] << "     #  # " << Y[82] << "     #  # " << Y[83] << "     #  # " << Y[84] << "     #  # " << Y[85] << "     #  # " << Y[86] << "     #  # " << Y[87] << " S4S #  # " << Y[88] << "     #  # " << Y[89] << "     #  # " << Y[90] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[71] << "     #  # " << X[72] << " L7S #  # " << X[73] << "     #  # " << X[74] << "     #  # " << X[75] << "     #  # " << X[76] << "     #  # " << X[77] << "     #  # " << X[78] << "     #  # " << X[79] << "     #  # " << X[80] << "     #\n# 71    #  # 72    #  # 73    #  # 74    #  # 75    #  # 76    #  # 77    #  # 78    #  # 79    #  # 80    #\n# " << Y[71] << "     #  # " << Y[72] << "     #  # " << Y[73] << " S6E #  # " << Y[74] << "     #  # " << Y[75] << " S7E #  # " << Y[76] << " S4E #  # " << Y[77] << "     #  # " << Y[78] << "     #  # " << Y[79] << " S8E #  # " << Y[80] << " L8S #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[61] << "     #  # " << X[62] << "     #  # " << X[63] << "     #  # " << X[64] << "     #  # " << X[65] << "     #  # " << X[66] << "     #  # " << X[67] << " L6E #  # " << X[68] << "     #  # " << X[69] << "     #  # " << X[70] << "     #\n# 61    #  # 62    #  # 63    #  # 64    #  # 65    #  # 66    #  # 67    #  # 68    #  # 69    #  # 70    #\n# " << Y[61] << "     #  # " << Y[62] << " S2S #  # " << Y[63] << "     #  # " << Y[64] << " S5S #  # " << Y[65] << "     #  # " << Y[66] << "     #  # " << Y[67] << "     #  # " << Y[68] << "     #  # " << Y[69] << "     #  # " << Y[70] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[51] << " L6S #  # " << X[52] << "     #  # " << X[53] << "     #  # " << X[54] << "     #  # " << X[55] << "     #  # " << X[56] << "     #  # " << X[57] << "     #  # " << X[58] << "     #  # " << X[59] << "     #  # " << X[60] << "     #\n# 51    #  # 52    #  # 53    #  # 54    #  # 55    #  # 56    #  # 57    #  # 58    #  # 59    #  # 60    #\n# " << Y[51] << "     #  # " << Y[52] << "     #  # " << Y[53] << "     #  # " << Y[54] << " S3S #  # " << Y[55] << "     #  # " << Y[56] << "     #  # " << Y[57] << "     #  # " << Y[58] << "     #  # " << Y[59] << "     #  # " << Y[60] << " S5E #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[41] << "     #  # " << X[42] << " L4E #  # " << X[43] << "     #  # " << X[44] << "     #  # " << X[45] << "     #  # " << X[46] << "     #  # " << X[47] << "     #  # " << X[48] << "     #  # " << X[49] << "     #  # " << X[50] << "     #\n# 41    #  # 42    #  # 43    #  # 44    #  # 45    #  # 46    #  # 47    #  # 48    #  # 49    #  # 50    #\n# " << Y[41] << "     #  # " << Y[42] << "     #  # " << Y[43] << "     #  # " << Y[44] << "     #  # " << Y[45] << "     #  # " << Y[46] << "     #  # " << Y[47] << "     #  # " << Y[48] << "     #  # " << Y[49] << "     #  # " << Y[50] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[31] << " L3E #  # " << X[32] << "     #  # " << X[33] << "     #  # " << X[34] << "     #  # " << X[35] << "     #  # " << X[36] << "     #  # " << X[37] << "     #  # " << X[38] << " L1E #  # " << X[39] << "     #  # " << X[40] << "     #\n# 31    #  # 32    #  # 33    #  # 34    #  # 35    #  # 36    #  # 37    #  # 38    #  # 39    #  # 40    #\n# " << Y[31] << "     #  # " << Y[32] << "     #  # " << Y[33] << "     #  # " << Y[34] << " S3E #  # " << Y[35] << "     #  # " << Y[36] << " S4E #  # " << Y[37] << "     #  # " << Y[38] << "     #  # " << Y[39] << "     #  # " << Y[40] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[21] << " L4S #  # " << X[22] << "     #  # " << X[23] << "     #  # " << X[24] << "     #  # " << X[25] << "     #  # " << X[26] << "     #  # " << X[27] << "     #  # " << X[28] << " L5S #  # " << X[29] << "     #  # " << X[30] << "     #\n# 21    #  # 22    #  # 23    #  # 24    #  # 25    #  # 26    #  # 27    #  # 28    #  # 29    #  # 30    #\n# " << Y[21] << "     #  # " << Y[22] << "     #  # " << Y[23] << "     #  # " << Y[24] << "     #  # " << Y[25] << "     #  # " << Y[26] << "     #  # " << Y[27] << "     #  # " << Y[28] << "     #  # " << Y[29] << "     #  # " << Y[30] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[11] << "     #  # " << X[12] << "     #  # " << X[13] << "     #  # " << X[14] << " L2E #  # " << X[15] << "     #  # " << X[16] << "     #  # " << X[17] << "     #  # " << X[18] << "     #  # " << X[19] << "     #  # " << X[20] << "     #\n# 11    #  # 12    #  # 13    #  # 14    #  # 15    #  # 16    #  # 17    #  # 18    #  # 19    #  # 20    #\n# " << Y[11] << "     #  # " << Y[12] << "     #  # " << Y[13] << "     #  # " << Y[14] << "     #  # " << Y[15] << "     #  # " << Y[16] << "     #  # " << Y[17] << " S1S #  # " << Y[18] << "     #  # " << Y[19] << " S2E #  # " << Y[20] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[1] << " L1S #  # " << X[2] << "     #  # " << X[3] << "     #  # " << X[4] << " L2S #  # " << X[5] << "     #  # " << X[6] << "     #  # " << X[7] << "     #  # " << X[8] << "     #  # " << X[9] << " L3S #  # " << X[10] << "     #\n# 1     #  # 2     #  # 3     #  # 4     #  # 5     #  # 6     #  # 7     #  # 8     #  # 9     #  # 10    #\n# " << Y[1] << "     #  # " << Y[2] << "     #  # " << Y[3] << "     #  # " << Y[4] << "     #  # " << Y[5] << "     #  # " << Y[6] << "     #  # " << Y[7] << " S1E #  # " << Y[8] << "     #  # " << Y[9] << "     #  # " << Y[10] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\n\n";
    }

    else if (level == 3)
    {
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[91] << "     #  # " << X[92] << "     #  # " << X[93] << "     #  # " << X[94] << "     #  # " << X[95] << "     #  # " << X[96] << " L8E #  # " << X[97] << "     #  # " << X[98] << "     #  # " << X[99] << " L6E #  # " << X[100] << "     #\n# 91    #  # 92    #  # 93    #  # 94    #  # 95    #  # 96    #  # 97    #  # 98    #  # 99    #  # 100   #\n# " << Y[91] << "     #  # " << Y[92] << "     #  # " << Y[93] << " S8S #  # " << Y[94] << "     #  # " << Y[95] << "     #  # " << Y[96] << "     #  # " << Y[97] << "     #  # " << Y[98] << " S4S #  # " << Y[99] << "     #  # " << Y[100] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[81] << "     #  # " << X[82] << "     #  # " << X[83] << "     #  # " << X[84] << "     #  # " << X[85] << "     #  # " << X[86] << "     #  # " << X[87] << " L7E #  # " << X[88] << "     #  # " << X[89] << "     #  # " << X[90] << " L5E #\n# 81    #  # 82    #  # 83    #  # 84    #  # 85    #  # 86    #  # 87    #  # 88    #  # 89    #  # 90    #\n# " << Y[81] << "     #  # " << Y[82] << "     #  # " << Y[83] << "     #  # " << Y[84] << " S6S #  # " << Y[85] << "     #  # " << Y[86] << "     #  # " << Y[87] << "     #  # " << Y[88] << " S9S #  # " << Y[89] << "     #  # " << Y[90] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[71] << "     #  # " << X[72] << "     #  # " << X[73] << "     #  # " << X[74] << "     #  # " << X[75] << "     #  # " << X[76] << "     #  # " << X[77] << " L8S #  # " << X[78] << "     #  # " << X[79] << " L3E #  # " << X[80] << "     #\n# 71    #  # 72    #  # 73    #  # 74    #  # 75    #  # 76    #  # 77    #  # 78    #  # 79    #  # 80    #\n# " << Y[71] << "     #  # " << Y[72] << "     #  # " << Y[73] << "     #  # " << Y[74] << "     #  # " << Y[75] << "     #  # " << Y[76] << "     #  # " << Y[77] << "     #  # " << Y[78] << "     #  # " << Y[79] << "     #  # " << Y[80] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[61] << " L6S #  # " << X[62] << "     #  # " << X[63] << "     #  # " << X[64] << "     #  # " << X[65] << "     #  # " << X[66] << " L7S #  # " << X[67] << "     #  # " << X[68] << "     #  # " << X[69] << "     #  # " << X[70] << "     #\n# 61    #  # 62    #  # 63    #  # 64    #  # 65    #  # 66    #  # 67    #  # 68    #  # 69    #  # 70    #\n# " << Y[61] << "     #  # " << Y[62] << "     #  # " << Y[63] << "     #  # " << Y[64] << " S7S #  # " << Y[65] << "     #  # " << Y[66] << "     #  # " << Y[67] << "     #  # " << Y[68] << " S1S #  # " << Y[69] << "     #  # " << Y[70] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[51] << "     #  # " << X[52] << "     #  # " << X[53] << "     #  # " << X[54] << "     #  # " << X[55] << "     #  # " << X[56] << "     #  # " << X[57] << "     #  # " << X[58] << "     #  # " << X[59] << "     #  # " << X[60] << "     #\n# 51    #  # 52    #  # 53    #  # 54    #  # 55    #  # 56    #  # 57    #  # 58    #  # 59    #  # 60    #\n# " << Y[51] << " S9E #  # " << Y[52] << " S3S #  # " << Y[53] << "     #  # " << Y[54] << "     #  # " << Y[55] << "     #  # " << Y[56] << "     #  # " << Y[57] << " S5S #  # " << Y[58] << "     #  # " << Y[59] << "     #  # " << Y[60] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[41] << "     #  # " << X[42] << "     #  # " << X[43] << "     #  # " << X[44] << "     #  # " << X[45] << "     #  # " << X[46] << "     #  # " << X[47] << "     #  # " << X[48] << "     #  # " << X[49] << " L4E #  # " << X[50] << " L5S #\n# 41    #  # 42    #  # 43    #  # 44    #  # 45    #  # 46    #  # 47    #  # 48    #  # 49    #  # 50    #\n# " << Y[41] << "     #  # " << Y[42] << "     #  # " << Y[43] << "     #  # " << Y[44] << "     #  # " << Y[45] << "     #  # " << Y[46] << "     #  # " << Y[47] << "     #  # " << Y[48] << " S2S #  # " << Y[49] << "     #  # " << Y[50] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[31] << "     #  # " << X[32] << "     #  # " << X[33] << "     #  # " << X[34] << "     #  # " << X[35] << "     #  # " << X[36] << "     #  # " << X[37] << "     #  # " << X[38] << " L2E #  # " << X[39] << "     #  # " << X[40] << "     #\n# 31    #  # 32    #  # 33    #  # 34    #  # 35    #  # 36    #  # 37    #  # 38    #  # 39    #  # 40    #\n# " << Y[31] << "     #  # " << Y[32] << "     #  # " << Y[33] << "     #  # " << Y[34] << "     #  # " << Y[35] << "     #  # " << Y[36] << "     #  # " << Y[37] << " S8E #  # " << Y[38] << "     #  # " << Y[39] << "     #  # " << Y[40] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[21] << " L3S #  # " << X[22] << "     #  # " << X[23] << "     #  # " << X[24] << "     #  # " << X[25] << "     #  # " << X[26] << " L1E #  # " << X[27] << "     #  # " << X[28] << " L4S #  # " << X[29] << "     #  # " << X[30] << "     #\n# 21    #  # 22    #  # 23    #  # 24    #  # 25    #  # 26    #  # 27    #  # 28    #  # 29    #  # 30    #\n# " << Y[21] << " S6E #  # " << Y[22] << "     #  # " << Y[23] << "     #  # " << Y[24] << " S7E #  # " << Y[25] << "     #  # " << Y[26] << "     #  # " << Y[27] << "     #  # " << Y[28] << "     #  # " << Y[29] << "     #  # " << Y[30] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[11] << "     #  # " << X[12] << "     #  # " << X[13] << "     #  # " << X[14] << "     #  # " << X[15] << "     #  # " << X[16] << "     #  # " << X[17] << "     #  # " << X[18] << "     #  # " << X[19] << " L2S #  # " << X[20] << "     #\n# 11    #  # 12    #  # 13    #  # 14    #  # 15    #  # 16    #  # 17    #  # 18    #  # 19    #  # 20    #\n# " << Y[11] << " S3E #  # " << Y[12] << "     #  # " << Y[13] << " S4E #  # " << Y[14] << "     #  # " << Y[15] << "     #  # " << Y[16] << "     #  # " << Y[17] << " S5E #  # " << Y[18] << "     #  # " << Y[19] << "     #  # " << Y[20] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n";
        cout << "\n";
        cout << "# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n# " << X[1] << "     #  # " << X[2] << "     #  # " << X[3] << "     #  # " << X[4] << "     #  # " << X[5] << "     #  # " << X[6] << "     #  # " << X[7] << "     #  # " << X[8] << " L1S #  # " << X[9] << "     #  # " << X[10] << "     #\n# 1     #  # 2     #  # 3     #  # 4     #  # 5     #  # 6     #  # 7     #  # 8     #  # 9     #  # 10    #\n# " << Y[1] << "     #  # " << Y[2] << " S1E #  # " << Y[3] << "     #  # " << Y[4] << "     #  # " << Y[5] << "     #  # " << Y[6] << "     #  # " << Y[7] << "     #  # " << Y[8] << "     #  # " << Y[9] << " S2E #  # " << Y[10] << "     #\n# # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #  # # # # #\n\n\n";
    }
    return;
}

void Board::updateBoard(int p, int i)
{
    if (p == 1)
    {
        for (int j = 1; j < 101; j++)
            X[j] = ' ';
        X[i] = 'X';
    }
    else if (p == 2)
    {
        for (int j = 1; j < 101; j++)
            Y[j] = ' ';
        Y[i] = 'Y';
    }
    return;
}

void Board::showDie(int m)
{
    switch (m)
    {
    case 1:
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        cout << "\t\t\t* ***   *\n";
        for (int i = 0; i < 3; i++)
            cout << "\t\t\t*   *   *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        break;
    case 2:
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t*     * *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t* *     *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        break;
    case 3:
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t*     * *\n";
        cout << "\t\t\t*   *** *\n";
        cout << "\t\t\t*     * *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        break;
    case 4:
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        cout << "\t\t\t* *     *\n";
        cout << "\t\t\t* *  *  *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t*    *  *\n";
        cout << "\t\t\t*    *  *\n";
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        break;
    case 5:
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t* *     *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t*     * *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        break;
    case 6:
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t* *     *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t* *   * *\n";
        cout << "\t\t\t* ***** *\n";
        cout << "\t\t\t";
        for (int i = 0; i < 9; i++)
            cout << "*";
        cout << endl;
        break;
    }
}
/**************************************************************/

int main()
{
    cout << "\t\t\t\t\t\t\t\t\t****************************************************\n";
    cout << "\t\t\t\t\t\t\t\t\t\t\t\tWELCOME                                     \n";
    cout << "\t\t\t\t\t\t\t\t\t****************************************************\n";

    Game G;
    G.get_instruction();
    cout << "GAME STARTING...\n\n";
    BoardDataTable t;
    cout << "Please select level, by pressing corresponding number:)\n\t1. LEVEL-1\n\t2. LEVEL-2\n\t3. LEVEL-3\n\n";
    int level;
    cin >> level;
    getchar();
    t.CreateTable(level);
    Board b;
    Dice d;

    int f = 1;
    int idx1 = 1, idx2 = 1;

    G.setNames();
    /* Time function returns the time since the
        Epoch(jan 1 1970). Returned time is in seconds. */
    time_t starttime, endtime;
    time(&starttime);
    while (1)
    {
        int move = d.randomRoll();

        int flag = 0;
        if (idx1 >= 95 && f == 1)
        {
            int temp = 100 - idx1;
            if (move <= temp)
                idx1 += move;
            else
                move = 0;
            if (idx1 == 100)
            {
                b.DisplayBoard(level);
                G.get_player_turn(f);
                cout << "\n\n"
                     << G.getName(f) << " scored on the Dice: " << endl;
                b.showDie(move);
                cout << endl;

                cout << "PLAYER 1 : " << G.getName(1) << "\n";
                cout << "PLAYER 2 : " << G.getName(2) << "\n";

                cout << "\n";
                cout << G.getName(1) << " is at index : " << idx1 << "\n";
                cout << G.getName(2) << " is at index : " << idx2 << "\n";
                cout << "Congrats!!\n"
                     << G.getName(1) << " you won the Game.\n";
                break;
            }
            if (flag == 1)
                continue;
            if (move == 0)
            {
                f = 2;
                //                cout << "Sorry " << G.getName(1) << " bad luck :((\nFor now you cannot make a move. Please try in next turn.\n";
                continue;
            }
        }
        if (idx2 >= 95 && f == 2)
        {
            int temp = 100 - idx2;
            move = move % temp;
            idx2 += move;
            if (idx2 == 100)
            {
                b.DisplayBoard(level);
                G.get_player_turn(f);
                cout << "\n\n"
                     << G.getName(f) << " scored on the Dice: " << endl;
                b.showDie(move);
                cout << endl;

                cout << "PLAYER 1 : " << G.getName(1) << "\n";
                cout << "PLAYER 2 : " << G.getName(2) << "\n";

                cout << "\n";
                cout << G.getName(1) << " is at index : " << idx1 << "\n";
                cout << G.getName(2) << " is at index : " << idx2 << "\n";
                cout << "Congrats!!\n"
                     << G.getName(1) << " you won the Game.\n";
                break;
            }
            if (flag == 1)
                continue;
            if (move == 0)
            {
                f = 1;
                //                cout << "Sorry " << G.getName(2) << " bad luck :((\nFor now you cannot make a move. Please try in next turn.\n";
                continue;
            }
        }

        b.DisplayBoard(level);
        G.get_player_turn(f);
        cout << "\n\n"
             << G.getName(f) << " scored on the Dice: " << endl;
        b.showDie(move);
        cout << endl;

        cout << "PLAYER 1 : " << G.getName(1) << "\n";
        cout << "PLAYER 2 : " << G.getName(2) << "\n";

        cout << "\n";
        cout << G.getName(1) << " is at index : " << idx1 << "\n";
        cout << G.getName(2) << " is at index : " << idx2 << "\n";

        cout << "Please press ANY KEY to roll the dice: :)\n\n";
        getchar();

        if (f == 1) // p;ayer X logic
        {
            idx1 += move;
            b.updateBoard(1, idx1);
            b.DisplayBoard(level);
            if (t.getSnakeTail(idx1) != -1)
            {
                idx1 = t.getSnakeTail(idx1);
                b.updateBoard(1, idx1);
                b.DisplayBoard(level);
                cout << "\n";
                cout << "Player : " << G.getName(1) << " got the Snake :((\n";
                cout << "\n";
                f = 2;
            }
            else
            {
                f = 2;
            }
            if (t.getLadderEnd(idx1) != -1)
            {
                idx1 = t.getLadderEnd(idx1);
                b.updateBoard(1, idx1);
                b.DisplayBoard(level);
                cout << "\nPlayer : " << G.getName(1) << " got the The ladder :))\n";
                f = 2;
            }
            if (move == 6)
            {
                f = 1;
            }
            else
                f = 2;
        }
        else // player 2 logic
        {
            idx2 += move;
            b.updateBoard(2, idx2);
            b.DisplayBoard(level);
            if (t.getSnakeTail(idx2) != -1)
            {
                idx2 = t.getSnakeTail(idx2);
                b.updateBoard(2, idx2);
                b.DisplayBoard(level);
                cout << "\nPlayer : " << G.getName(2) << " got the Snake :((\n";
                if (t.getSnakeTail(idx2) != -1)
                    f = 1;
            }
            else
            {
                f = 1;
            }
            if (t.getLadderEnd(idx2) != -1)
            {
                idx2 = t.getLadderEnd(idx2);
                b.updateBoard(2, idx2);
                b.DisplayBoard(level);
                cout << "\nPlayer : " << G.getName(2) << " got the Ladder :((\n";
                f = 1;
            }
            if (move == 6)
            {
                f = 2;
            }
            else
                f = 1;
        }
    }
    time(&endtime);

    double timeTaken = double(endtime - starttime);
    cout << "\n\n\tThe game took " << timeTaken << "s to conclude. \n";

    return 0;
}
